@model List<Pharmaflow7.Models.ShipmentViewModel>
@{
    ViewData["Title"] = "Track Shipments";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Medicine Tracking</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="~/css/dash.css" asp-append-version="true">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <style>
        #map {
            height: 400px; /* ارتفاع الخريطة */
            width: 100%;
        }
    </style>
</head>
<body>
    <!-- Main Content -->
    <div class="content">
        <h1 class="mb-4">Track Shipments</h1>

        <!-- Shipments Table -->
        <div class="mb-4">
            <h3>Shipment List</h3>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Shipment ID</th>
                            <th>Product</th>
                            <th>Destination</th>
                            <th>Store Address</th>
                            <th>Status</th>
                            <th>Acceptance Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="shipmentTableBody">
                        @foreach (var shipment in Model)
                        {
                            <tr>
                                <td>@shipment.Id</td>
                                <td>@shipment.ProductName</td>
                                <td>@shipment.Destination</td>
                                <td>@shipment.StoreAddress</td>
                                <td><span class="badge @(shipment.Status == "In Transit" ? "bg-warning" : shipment.Status == "Delivered" ? "bg-success" : "bg-info")">@shipment.Status</span></td>
                                <td>
                                    @if (shipment.IsAcceptedByDistributor == null)
                                    {
                                        <span class="badge bg-secondary">Pending</span>
                                    }
                                    else if (shipment.IsAcceptedByDistributor == true)
                                    {
                                        <span class="badge bg-success">Accepted</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Rejected</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="showOnMap('@shipment.StoreAddress', '@shipment.Id')">View on Map</button>
                                    <button class="btn btn-success btn-sm" onclick="navigateToShipment('@shipment.StoreAddress')">Navigate</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Map -->
        <div class="card p-3">
            <h3>Shipment Locations</h3>
            <div id="map"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
        let map;
        let markers = [];

        // تهيئة الخريطة باستخدام Leaflet وOpenStreetMap
        function initMap() {
            map = L.map('map').setView([30.0444, 31.2357], 6); // مركز افتراضي (القاهرة)

            // إضافة طبقة OpenStreetMap
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // إضافة علامات لجميع الشحنات
            const shipments = @Html.Raw(Json.Serialize(Model));
            shipments.forEach(shipment => {
                if (shipment.storeAddress) {
                    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(shipment.storeAddress)}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data && data.length > 0) {
                                const lat = parseFloat(data[0].lat);
                                const lon = parseFloat(data[0].lon);
                                const marker = L.marker([lat, lon], {
                                    icon: L.icon({
                                        iconUrl: shipment.status === 'Delivered' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png' :
                                                 shipment.status === 'In Transit' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png' :
                                                 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
                                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
                                        iconSize: [25, 41],
                                        iconAnchor: [12, 41],
                                        popupAnchor: [1, -34],
                                        shadowSize: [41, 41]
                                    })
                                }).addTo(map);
                                marker.bindPopup(`<h5>${shipment.id}</h5><p>Product: ${shipment.productName}</p><p>Status: ${shipment.status}</p><p>Address: ${shipment.storeAddress}</p>`);
                                markers.push({ id: shipment.id, marker: marker });
                            } else {
                                console.error(`Geocode failed for ${shipment.storeAddress}`);
                            }
                        })
                        .catch(error => console.error('Error geocoding:', error));
                }
            });
        }

        // توسيط الخريطة على شحنة محددة
        function showOnMap(address, shipmentId) {
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        const lat = parseFloat(data[0].lat);
                        const lon = parseFloat(data[0].lon);
                        map.setView([lat, lon], 12);
                        const marker = markers.find(m => m.id == shipmentId);
                        if (marker) {
                            marker.marker.openPopup();
                        }
                    } else {
                        alert("Could not find location on map: " + address);
                    }
                })
                .catch(error => {
                    console.error('Error geocoding:', error);
                    alert("Error finding location: " + address);
                });
        }

        // فتح تطبيق خرائط للتنقل إلى موقع الشحنة
        function navigateToShipment(address) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const userLat = position.coords.latitude;
                        const userLng = position.coords.longitude;
                        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
                            .then(response => response.json())
                            .then(data => {
                                if (data && data.length > 0) {
                                    const destLat = data[0].lat;
                                    const destLng = data[0].lon;
                                    const url = `https://www.openstreetmap.org/directions?from=${userLat},${userLng}&to=${destLat},${destLng}`;
                                    window.open(url, '_blank');
                                } else {
                                    const url = `https://www.openstreetmap.org/search?query=${encodeURIComponent(address)}`;
                                    window.open(url, '_blank');
                                }
                            })
                            .catch(error => {
                                console.error('Error geocoding:', error);
                                const url = `https://www.openstreetmap.org/search?query=${encodeURIComponent(address)}`;
                                window.open(url, '_blank');
                            });
                    },
                    (error) => {
                        console.error('Error getting user location:', error);
                        const url = `https://www.openstreetmap.org/search?query=${encodeURIComponent(address)}`;
                        window.open(url, '_blank');
                    }
                );
            } else {
                const url = `https://www.openstreetmap.org/search?query=${encodeURIComponent(address)}`;
                window.open(url, '_blank');
            }
        }

        // تشغيل الخريطة عند تحميل الصفحة
        window.onload = initMap;
    </script>
</body>
</html>