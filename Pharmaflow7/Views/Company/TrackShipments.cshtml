@model List<Pharmaflow7.Models.ShipmentViewModel>
@{
    ViewData["Title"] = "Track Shipments";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Medicine Tracking</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="~/css/dash.css" asp-append-version="true">
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <h4>Medicine Tracking</h4>
        <a href="@Url.Action("CompanyDashboard", "Company")"><i class="fas fa-tachometer-alt me-2"></i> Dashboard</a>
        <a href="@Url.Action("AddProduct", "Company")"><i class="fas fa-plus-circle me-2"></i> Add Product</a>
        <a href="@Url.Action("ManageProducts", "Company")"><i class="fas fa-boxes me-2"></i> Manage Products</a>
        <a href="#" class="active"><i class="fas fa-truck me-2"></i> Track Shipments</a>
        <a href="@Url.Action("Reports", "Company")"><i class="fas fa-chart-line me-2"></i> Reports</a>
        <a href="@Url.Action("Logout", "Auth")"><i class="fas fa-sign-out-alt me-2"></i> Logout</a>
    </div>

    <!-- Main Content -->
    <div class="content">
        <h1 class="mb-4">Track Shipments</h1>

        <!-- Shipments Table -->
        <div class="mb-4">
            <h3>Shipment List</h3>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Shipment ID</th>
                            <th>Product</th>
                            <th>Destination</th>
                            <th>Status</th>
                            <th>Current Location</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="shipmentTableBody">
                        @foreach (var shipment in Model)
                        {
                            <tr>
                                <td>@shipment.Id</td>
                                <td>@shipment.ProductName</td>
                                <td>@shipment.Destination</td>
                                <td><span class="badge @(shipment.Status == "In Transit" ? "bg-warning" : shipment.Status == "Delivered" ? "bg-success" : "bg-info")">@shipment.Status</span></td>
                                <td>@shipment.CurrentLocation</td>
                                <td><button class="btn btn-primary btn-sm" onclick="showOnMap(@shipment.LocationLat, @shipment.LocationLng, '@shipment.Id')">View on Map</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Map -->
        <div class="card p-3">
            <h3>Shipment Locations</h3>
            <div id="map"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap" async defer></script>
    <script>
        // Initialize Google Map
        let map;
        let markers = [];
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 30.0444, lng: 31.2357 }, // Default center (Cairo)
                zoom: 6
            });

            // Add markers for all shipments from Model
            const shipments = @Html.Raw(Json.Serialize(Model));
            shipments.forEach(shipment => {
                const marker = new google.maps.Marker({
                    position: { lat: shipment.locationLat, lng: shipment.locationLng },
                    map: map,
                    title: `${shipment.id} - ${shipment.productName}`,
                    icon: shipment.status === 'Delivered' ? 'http://maps.google.com/mapfiles/ms/icons/green-dot.png' :
                          shipment.status === 'In Transit' ? 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png' :
                          'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                });
                markers.push(marker);

                // Info window for each marker
                const infoWindow = new google.maps.InfoWindow({
                    content: `<h5>${shipment.id}</h5><p>Product: ${shipment.productName}</p><p>Status: ${shipment.status}</p><p>Location: ${shipment.currentLocation}</p>`
                });
                marker.addListener('click', () => {
                    infoWindow.open(map, marker);
                });
            });
        }

        // Show specific shipment on map
        function showOnMap(lat, lng, shipmentId) {
            map.setCenter({ lat: lat, lng: lng });
            map.setZoom(12);
            markers.forEach(marker => {
                if (marker.title.includes(shipmentId)) {
                    new google.maps.InfoWindow({
                        content: marker.title
                    }).open(map, marker);
                }
            });
        }
    </script>
</body>
</html>